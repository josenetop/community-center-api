package br.com.planejeisofwarehouse.communitycenterapi.Infrastructure.Service

import br.com.planejeisofwarehouse.communitycenterapi.Application.DTO.Discord.DiscordWebhookMessage
import br.com.planejeisofwarehouse.communitycenterapi.Application.DTO.Discord.Embed
import br.com.planejeisofwarehouse.communitycenterapi.Application.DTO.Discord.Field
import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Value
import org.springframework.http.HttpEntity
import org.springframework.http.HttpHeaders
import org.springframework.http.MediaType
import org.springframework.stereotype.Service
import org.springframework.web.client.RestTemplate
import java.time.Instant
import java.util.UUID

@Service
class NotifierService(
    @Value("\${discord.webhook.general-alerts}")
    val discordGeneralWebhookUrl: String,
    @Value("\${discord.webhook.exchange-alerts}")
    val discordExchangeWebhookUrl: String,
    private val restTemplate: RestTemplate
) {
    private val logger = LoggerFactory.getLogger(NotifierService::class.java)

    fun sendCapacityAlert(
        centerId: UUID,
        centerName: String,
        maxCapacity: Int
    ) {
        val message = DiscordWebhookMessage(
            username = "Alerta de Capacidade",
            embeds = listOf(
                Embed(
                    title = "üö® CAPACIDADE M√ÅXIMA ATINGIDA! üö®",
                    description = "O centro comunit√°rio **${centerName}** atingiu ou excedeu sua capacidade m√°xima!",
                    color = 16711680,
                    fields = listOf(
                        Field(name = "ID do Centro", value = centerId.toString(), inline = true),
                        Field(name = "Capacidade M√°xima", value = maxCapacity.toString(), inline = true)
                    ),
                    timestamp = Instant.now().toString()
                )
            )
        )
        sendWebhookMessage(message, discordGeneralWebhookUrl)
        logger.info("Alerta de capacidade m√°xima enviado para Discord para o centro: $centerName (ID: $centerId)")
    }

    fun sendHighOccupancyWarning(
        centerId: UUID,
        centerName: String,
        currentOccupation: Int,
        maxCapacity: Int
    ) {
        val message = DiscordWebhookMessage(
            username = "Aviso de Ocupa√ß√£o",
            embeds = listOf(
                Embed(
                    title = "‚ö†Ô∏è ALTA OCUPA√á√ÉO DETECTADA! ‚ö†Ô∏è",
                    description = "O centro comunit√°rio **${centerName}** est√° com alta ocupa√ß√£o.",
                    color = 16776960,
                    fields = listOf(
                        Field(name = "ID do Centro", value = centerId.toString(), inline = true),
                        Field(name = "Ocupa√ß√£o Atual", value = currentOccupation.toString(), inline = true),
                        Field(name = "Capacidade M√°xima", value = maxCapacity.toString(), inline = true)
                    ),
                    timestamp = Instant.now().toString()
                )
            )
        )
        sendWebhookMessage(message, discordGeneralWebhookUrl)
        logger.warn("Aviso de alta ocupa√ß√£o enviado para Discord para o centro: $centerName (ID: $centerId)")
    }

    fun sendExchangeHighOccupancyExemptionNotification(
        centerId: UUID,
        centerName: String,
        pointsOffered: Int,
        pointsReceived: Int,
        otherCenterName: String
    ) {
        val message = DiscordWebhookMessage(
            username = "Alerta de Interc√¢mbio",
            embeds = listOf(
                Embed(
                    title = "‚ÑπÔ∏è Exce√ß√£o de Alta Ocupa√ß√£o no Interc√¢mbio",
                    description = "Uma exce√ß√£o de alta ocupa√ß√£o foi aplicada durante um interc√¢mbio de recursos.\n" +
                            "**Centro:** ${centerName}\n" +
                            "**Outro Centro:** ${otherCenterName}",
                    color = 65535, // Azul claro
                    fields = listOf(
                        Field(name = "ID do Centro", value = centerId.toString(), inline = true),
                        Field(name = "Pontos Oferecidos", value = pointsOffered.toString(), inline = true),
                        Field(name = "Pontos Recebidos", value = pointsReceived.toString(), inline = true)
                    ),
                    timestamp = Instant.now().toString()
                )
            )
        )
        sendWebhookMessage(message, discordExchangeWebhookUrl)
        logger.info("Notifica√ß√£o de exce√ß√£o de alta ocupa√ß√£o no interc√¢mbio enviada para " +
                "Discord para o centro: $centerName (ID: $centerId)"
        )
    }

    fun sendWebhookMessage(message: DiscordWebhookMessage, webhookUrl: String) {
        if (webhookUrl.isBlank() || webhookUrl.contains("ID_WEBHOOK")) {
            logger.warn("URL do webhook do Discord n√£o configurada. Notifica√ß√£o n√£o enviada.")
            return
        }

        val headers = HttpHeaders().apply {
            contentType = MediaType.APPLICATION_JSON
        }
        val entity = HttpEntity(message, headers)

        try {
            restTemplate.postForEntity(webhookUrl, entity, String::class.java)
        } catch (e: Exception) {
            logger.error("Erro ao enviar notifica√ß√£o para o Discord webhook $webhookUrl: ${e.message}", e)
        }
    }
}